<?xml version="1.0" encoding="UTF-8"?>
 <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
      xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension">
  
  <!-- 
    1. Provide a description of the application, both the human readable texts and the required GUIDs. 
    2. Specify media you want to install from. 
    3. Specify folder structure of the files to be installed. These files, together with their accompanying resources, all go into the appropriate components. 
    4. Describe features you would like to install, referring back to the individual components. -->
   
   <!-- http://wix.tramontana.co.hu/tutorial 
   http://stackoverflow.com/questions/471424/wix-tricks-and-tips 
   http://alekdavis.blogspot.co.il/2010/10/learning-wix-from-ground-up.html
   http://alekdavis.blogspot.co.il/2011/05/build-32-and-64-bit-installers-using.html 
   http://wixtoolset.org/documentation/manual/v3/votive/votive_project_references.html -->
   
   <?include $(sys.CURRENTDIR)\Config.wxi?>
   
   
   <!--
      ====================================================================================
      Package start
   -->
   
   <!-- The Product section contains all the main elements for the installer. There can only be one product section in a wxs file. --> 
   <!-- The upgrade code must never change as long as the product lives! It needs to stay the same between versions. -->
   <!-- Product IDs must be autogenerated (*) or else major upgrades will not work. -->
   <Product 
    Id='*' 
    Name='$(var.ProductDisplayName) (v$(var.ProductVersion))' 
    Manufacturer='$(var.ProductManufacturer)'
    Version='$(var.ProductFullVersion)' 
    Language='1033' 
    Codepage='$(var.CodePage)' 
    UpgradeCode='$(var.ProductUpgradeCode)'> 
    
    <!-- Package IDs are valid for a single package version only - they are autogenerated by WiX -->
    <!-- Let's require Windows Installer 4.0 (included in Vista) -->
    <!-- And ALWAYS install per machine!!! InstallScope defaults to "perUser" if it is not set. -->
    <Package 
      Id='*' 
      Keywords='Installer' 
      Description='$(var.ProductName)' 
      InstallerVersion='400' 
      Comments='$(var.ProductManufacturer) is a registered trademark of $(var.ProductManufacturer) Ltd.' 
      Manufacturer='$(var.ProductManufacturer)' 
      Languages='$(var.PackageLanguage)'
      Compressed='yes'
      SummaryCodepage='$(var.CodePage)' 
      InstallScope='perMachine' />  
     
    <!-- License agreement text: dummy. Real text is set in WXS file -->
    <!-- <WixVariable Id="WixUILicenseRtf" Value="dummy" /> -->
     
     <!-- Define icons (ID should not be longer than 18 chars and must end with ".exe") -->
    <Icon Id="Icon.exe" SourceFile="..\images\analoc.ico" /> 
    <Icon Id="filetype_pdf.ico" SourceFile="..\images\filetype_pdf.ico" /> 
    
    <!-- Set properties for add/remove programs -->
    <!-- The ARPPRODUCTICON property specifies the foreign key to the Icon table, which is the primary icon for the Windows Installer package. -->
    <!-- The ARPHELPLINK property is the Internet address for technical support. Product maintenance applets display this value. -->
    <Property Id="ARPPRODUCTICON" Value="Icon.exe" />
    <Property Id="ARPHELPLINK" Value='$(var.ManufacturerWebsite)' />
    <Property Id="ARPNOREPAIR" Value="yes" Secure="yes" />      <!-- Remove repair -->
    <Property Id="ARPNOMODIFY" Value="yes" Secure="yes" />      <!-- Remove modify -->
     
    <!-- Upgrade logic -->
    <!-- AllowSameVersionUpgrades -> Always upgrade, never allow two versions to be installed next to each other -->
    <!-- AllowSameVersionUpgrades causes ICE61 which must be ignored -->
    <MajorUpgrade 
		  AllowDowngrades="no"
      AllowSameVersionUpgrades="yes"
		  Schedule="afterInstallFinalize"   
		  MigrateFeatures="yes"
		  DowngradeErrorMessage="A later or current version of [ProductName] is already installed. 
        To install this version, uninstall the currently installed version first." /> <!-- DowngradeErrorMessage="!(loc.NewerInstalled)" -->
       
    <InstallUISequence>
        <Custom Action="AssignTargetDir" Before="CostInitialize">TARGETDIR=""</Custom>
    </InstallUISequence>
     
    <!-- This is the main installer sequence run when the product is actually installed -->    
    <InstallExecuteSequence>
      
      <!-- Determine the install location after the install path has been validated by the installer -->
      <Custom Action="SetARPINSTALLLOCATION" After="InstallValidate"></Custom>
      
      <!-- Schedule the action using the matching Idâ€”Action attribute pair, which is the link between the action and the scheduling entry -->
      <!-- <Custom Action="AssignTargetDir" Before="CostInitialize">TARGETDIR=""</Custom> -->
      <!-- <Custom Action='LaunchHomework' After='InstallFinalize'>NOT Installed</Custom> -->
      <!-- <Custom Action='LaunchReadme' After='InstallFiles'>NOT Installed</Custom> -->
      <!-- <Custom Action='LaunchFooAction' After='InstallFiles'/> -->
    </InstallExecuteSequence>

     
    <!-- Set up ARPINSTALLLOCATION property -->
    <!-- http://blogs.technet.com/b/alexshev/archive/2008/02/09/from-msi-to-wix-part-2.aspx -->
    <CustomAction Id="SetARPINSTALLLOCATION" Property="ARPINSTALLLOCATION" Value="[INSTALLDIR]" />
    
    <!-- Setting EmbedCab to "yes" embeds the resources in the .msi file -->
	  <Media Id="1" Cabinet="media.cab" EmbedCab="yes" /> 
    
        
    <!-- Properties are global variables that Windows Installer uses during installation -->
    <!-- Property gets value from registry to set up installation folder for upgrades -->
    <!-- Store the installation location in the registry, enabling upgrades to find the correct location. 
      For example, if a user sets custom install directory. -->
    <Property Id="INSTALLDIR" Secure="yes">
	    <RegistrySearch 
		    Id='AppFolderRegistrySearch' 
		    Type='raw'
		    Root='HKLM' 
		    Key='Software\Microsoft\Windows\CurrentVersion\Uninstall\[WIX_UPGRADE_DETECTED]' 
		    Name='$(var.ProductAppFolder)' 
		    Win64='$(var.Win64)' />
    </Property>
    
    <!--
    <Property Id="INSTALLDIR">
      <RegistrySearch Id='AnalocHomeworkRegistry' Type='raw' Root='HKLM' Win64="$(var.Win64)"
        Key='Software\[Manufacturer]\[ProductName]' Name='InstallDir' />
    </Property>
    -->
    
    <!-- Define destination folder (name of application folder only) -->
	  <Property Id="ApplicationFolderName" Value="$(var.ProductName)" />

	  <!-- Default to per-machine installation -->
	  <Property Id="WixAppFolder" Value="WixPerMachineFolder" />
    
	  <!-- To disable per-user installation scope, uncomment this section -->
    <!-- <WixVariable Id="WixUISupportPerUser" Value="0" /> -->
    
    <!-- Set a property named WIXUI_INSTALLDIR with a value of the ID of the directory you want the user 
      to be able to specify the location of. The directory ID must be all uppercase characters because it 
      must be passed from the UI to the execute sequence to take effect. -->
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
    

    
   
   
    <!-- Note that the message will appear and the installation will be aborted if the condition 
      between the starting and closing tags evaluates to false. In other words, don't specify 
      the error condition, specify the case you want to proceed with the installation.   
    -->
    <Condition Message="You need to be an administrator to install this product.">
      Privileged <!-- NOT Privileged -->
    </Condition>

    <PropertyRef Id="NETFRAMEWORK45" />
    
    <!-- Installed is a Windows Installer property that ensures the check is only done 
      when the user is installing the application, rather than on a repair or remove. 
      The NETFRAMEWORK45 part of the condition will pass if .NET Framework 4.5 is installed. 
      If it is not set, the installer will display the error message then abort the installation process. -->    
    <Condition Message="This application requires .NET Framework 4.5. 
      Please install the .NET Framework then run this installer again.">
      <![CDATA[Installed OR NETFRAMEWORK45]]>
    </Condition>
    
    <!-- Features are separated parts of the application that we offer the user to decide whether to install or not.
      The Level attribute - a non-zero value means install while a 0 value means that the parent feature 
      of the condition (the Feature tag directly enclosing the condition) will not be installed.
      When adding conditional features, it's more intuitive to set the default feature level to 0 (disabled) 
      and then set the condition level to your desired value. If you set the default feature level >= 1, 
      the condition level has to be 0 to disable it, meaning the condition logic has to be the opposite to 
      what you'd expect, which can be confusing. 
      By including the ConfigurableDirectory attribute and making it refer to INSTALLDIR, thus creating the link 
      to the intended target directory as specified in the innermost Directory tag a few lines earlier, we allow 
      the user to change our originally intended target. If we don't use this attribute, the user can enable and 
      disable the various features the same way but won't be able to modify the installation directory. -->
    <Feature Id='Complete' Title='$(var.Title)' Description='The complete package.' 
      Display='expand' Level='1' ConfigurableDirectory='INSTALLDIR'>
      <Feature Id='MainApplication' Title='Application' Description='The main executable.' Level='0'>
        <ComponentRef Id='cmp_Homework.exe' />
        <ComponentRef Id='cmp_Newtonsoft.Json.dll' />
        <ComponentRef Id='cmp_SampleWixExtension.dll' />
        <ComponentRef Id='cmp_oui.txt' />
        <ComponentRef Id='cmp_readme.txt' />
        <ComponentRef Id='cmp_ShortcutsFolder' />
        <Condition Level="1">Privileged</Condition>
      </Feature>
      <Feature Id='Documentation' Title='Description' Description='The application manual.' Level='0'>
        <ComponentRef Id='cmp_HomeworkDescription.pdf' />
        <Condition Level="1">Privileged</Condition> <!-- <Condition Level="1">FILEEXISTS</Condition> -->
      </Feature>
      <Feature Id='RuntimeLogs' Title='Logs' Description='The runtime logs' Level='0'>
        <ComponentRef Id='cmp_LogsFolder' />
        <!-- <ComponentRef Id='LogFiles' /> -->
        <Condition Level="1">Privileged</Condition>
      </Feature>
    </Feature>
  
    <!-- Custom actions need to be mentioned in two places in the source file. -->
    <!-- We can launch any executable on the user's machine if we provide its name in a property -->
    <!-- http://wixtoolset.org/documentation/manual/v3/xsd/wix/customaction.html -->
    
    <!-- Full user interface -->
    <UI Id="MyWixUI_Mondo">
      
      <UIRef Id="WixUI_Mondo" />
      <DialogRef Id="UserRegistrationDlg" />
      <Publish Dialog="LicenseAgreementDlg" Control="Next" Event="NewDialog" Value="UserRegistrationDlg" Order="2">LicenseAccepted = "1"</Publish>
      <Publish Dialog="SetupTypeDlg" Control="Back" Event="NewDialog" Value="UserRegistrationDlg">1</Publish>
      
      <Property Id="WixUI_UserRegistrationDlgBack">LicenseAgreementDlg</Property>
      <Property Id="WixUI_UserRegistrationDlgNext">SetupTypeDlg</Property>
      
      <Publish 
        Dialog="ExitDialog" 
        Control="Finish" 
        Event="DoAction" 
        Value="LaunchHomework">WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT = 1 and NOT Installed</Publish>
    
    </UI>
    <UIRef Id="WixUI_ErrorProgressText" />
    
    <!-- Displays the checkbox on the last screen of the installer -->
    <Property Id="WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT" Value="Launch Homework" />
    
    <!-- The PIDTemplate property contains the string used as a template for the PIDKEY property. 
    For the syntax used in the template, see the MaskedEdit control type. ValidateProductID Action uses this value to validate the Product ID.
    https://msdn.microsoft.com/en-us/library/aa372475(v=vs.85).aspx https://msdn.microsoft.com/en-us/library/aa369797(v=vs.85).aspx -->
    <Property Id="PIDTemplate"><![CDATA[12345<# & #>@@@@@]]> </Property>

    <!-- We can launch any executable on the user's machine if we provide its name in a property
    <Property Id='NOTEPAD'>Notepad.exe</Property> -->
    
    <!-- The Property element sets the WixShellExecTarget to the location of the installed application. 
    WixShellExecTarget is the property Id the WixShellExec custom action expects will be set to the location of the file to run. 
    The Value property uses the special # character to tell WiX to look up the full installed path of the file with the fil_homework.exe id. -->
    <!-- http://wixtoolset.org/documentation/manual/v3/howtos/ui_and_localization/run_program_after_install.html -->
    <!-- <Property Id="WixShellExecTarget" Value="[#fil_readme.txt]" /> -->
    <Property Id="WixShellExecTarget" Value="[#fil_homework.exe]" />
    <CustomAction Id="LaunchHomework" BinaryKey="WixCA" DllEntry="WixShellExec" Impersonate="yes" />
    

   
  </Product>
  
  <!-- Create directory structure -->
  <!-- The Directory section is where files and other components are defined for installation. 
    WiX doesn't specify how to install files, rather you define the structure you want, 
    then WiX installs file based on that structure. -->
  <!-- The TARGETDIR property specifies the root destination directory for the installation. 
    TARGETDIR must be the name of one root in the Directory table.
    There may be only a single root destination directory.
    During an administrative installation this property specifies the location to copy the installation package.
    During a non-administrative installation this property specifies the root destination directory.
  -->
   
  <!-- 
    TARGETDIR is where you want to install to; SourceDir is the path to where the installation package 
    you are running is located. A predefined identifier of TARGETDIR will be set to our root directory that 
    contains the source cabinet file or the source file tree of the installation package, which also have a 
    predefined name: SourceDir. Applications should go under \Program Files\Company\Product 
    The SourceDir property is the root directory that contains the source cabinet file or the source file 
    tree of the installation package. This value is used for directory resolution. 
    Default Value: The directory that contains the installation package. 
    http://robmensching.com/blog/posts/2010/1/26/stackoverflow-what-does-namesourcedir-refer-to/
  -->
   
   <!-- The following code is used to set the TARGETDIR property to the root of the C:\ drive 
   By default, TARGETDIR does not point to C:\. It rather points to ROOTDRIVE which in turn points 
   to the root of the drive with the most free space and this is not necessarily the C:\ drive. -->
       
  <!-- Fragments allow splitting elements of the Wix document between multiple wxs files.
    Put Components which may be patched individually inside their own Fragments. 
    It goes for both making product installers and patches that if you include any component in a fragment, 
    you must include all of the components in that fragment. In the case of building an installer, 
    if you miss any component references, you'll get a linking error from light.exe. 
    However, when you make a patch, if you include a single component reference in a fragment, 
    then all changed components from that fragment will show up in your patch. -->       
       
  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <!-- C:\Program Files (x86)\Analoc\Homework --> 
      <Directory Id="$(var.PlatformProgramFilesFolder)">
        <Directory Id="AnalocInstallFolder" Name="$(var.ProductManufacturer)">
          <Directory Id="INSTALLDIR" Name="$(var.ProductName)">
            <Directory Id="ExecutablesFolder" Name="bin" />
            <Directory Id="DocumentsFolder" Name="docs" />
            <Directory Id="DllFolder" Name="dll" />
          </Directory>
        </Directory>
      </Directory>
      
      <Directory Id="ProgramMenuFolder" Name="Programs">
        <Directory Id="ShortcutsFolder" Name="$(var.ProductManufacturer)" />
      </Directory>
      
      <Directory Id="DesktopFolder" Name="Desktop" />
      
      <!-- C:\ProgramData\Analoc\Homework\Logs -->
      <Directory Id="CommonAppDataFolder" Name="ProgramDataFolder">
        <Directory Id="AnalocDataFolder" Name="$(var.ProductManufacturer)">
          <Directory Id="DataFolder" Name="$(var.ProductName)"> 
            <Directory Id="LogsFolder" Name="Logs" />           
          </Directory>
        </Directory>
      </Directory> 
      
    </Directory>  
  </Fragment>
     
  <Fragment>  
    <!-- Insert files, registry keys, shortcuts and other resources -->
    <!-- Components are small groups of files/registry settings/directories/shortcuts etc. 
      They are the smallest unit that can be conditionally installed. 
      Each Component must be specified in a Feature for it to be installed. -->
    <!-- A component should only contain items that belong together so strongly 
      that they always need to be installed or removed together 
    -->
        
    <ComponentGroup 
      Id="ProductExecutables" 
      Directory="ExecutablesFolder">  <!-- <DirectoryRef Id="ExecutablesFolder"> -->
      <Component 
        Id="cmp_Homework.exe" 
        Guid="{4F92E189-E197-4283-9531-1F11F1D872D4}">
        <File 
          Id="fil_homework.exe"
          Name="Homework.exe"
          Source="$(var.Homework.TargetPath)" 
          Vital="yes" KeyPath="yes" Checksum="yes" >
          <Shortcut 
            Id="StartMenuAnalocHomework" 
            Directory="ShortcutsFolder" 
            Name='$(var.ProductName)' 
            Description='$(var.ShortcutDescription)'
            WorkingDirectory="ExecutablesFolder" 
            Icon="Icon.exe"
            IconIndex="0" 
            Advertise="yes">
          </Shortcut>
          <Shortcut 
            Id="DesktopAnalocHomework" 
            Directory="DesktopFolder"
            Name='$(var.ProductName)'
            Description='$(var.ShortcutDescription)'
            WorkingDirectory="ExecutablesFolder"
            Icon="Icon.exe"
            IconIndex="0"
            Advertise="yes">
          </Shortcut>   
        </File>
      </Component>
      <Component 
        Id="cmp_Newtonsoft.Json.dll" 
        Guid="{EB857D1C-0AFA-49E5-88EC-EB445A86632A}">
        <File 
          Id="fil_Newtonsoft.Json.dll"
          Name="Newtonsoft.Json.dll"
          Source="..\packages\Newtonsoft.Json.6.0.7\lib\net45\Newtonsoft.Json.dll"
          Vital="yes" KeyPath="yes" Checksum="yes" Hidden="yes" ReadOnly="yes" >
        </File>  
      </Component>
      <Component 
        Id="cmp_SampleWixExtension.dll" 
        Guid="{B241D5CF-7733-4B31-AC2B-5BDF9778DA6C}">
        <File 
          Id="fil_SampleWixExtension.dll"
          Name="SampleWixExtension.dll"
          Source="..\dll\SampleWixExtension.dll"
          Vital="yes" KeyPath="yes" Checksum="yes" Hidden="yes" ReadOnly="yes" >
        </File>  
      </Component>
    </ComponentGroup> <!-- </DirectoryRef> -->
  </Fragment>
    
  <Fragment>
    <DirectoryRef Id="DocumentsFolder"> <!-- <ComponentGroup Id="ProductDocuments" Directory="DocumentsFolder"> -->  
      <Component 
        Id='cmp_HomeworkDescription.pdf' 
        Guid='{592FB96C-FE8E-4224-BB37-4591B5C7CECB}'>
        <File 
          Id='fil_HomeworkDescription.pdf'
          Name='HomeworkDescription.pdf'
          Source='$(var.Homework.DescriptionPath)' 
          Vital="no" ReadOnly='yes' KeyPath='yes'>
          <Shortcut 
            Id='StartMenuHomeworkDescription'
            Directory='ShortcutsFolder'
            Name='$(var.ProductDescription)'
            WorkingDirectory='DocumentsFolder'
            Icon='filetype_pdf.ico'
            IconIndex='0'
            Advertise='yes'>
          </Shortcut>
        </File>
      </Component>
      <Component 
        Id="cmp_oui.txt" 
        Guid="{E34950DB-969C-40FA-B877-2ACAAC8697F9}">
        <File 
          Id="fil_oui.txt"
          Name="oui.txt"
          Source="..\docs\oui.txt"
          Vital="yes" KeyPath="yes" Checksum="yes" Hidden="yes" ReadOnly="yes" >
        </File>   
      </Component>
      <Component 
        Id="cmp_readme.txt" 
        Guid="{4853EFEE-BFCF-40D4-B9A9-1A34E19734EF}">
        <File 
          Id="fil_readme.txt"
          Name="Readme.txt"
          Source="..\docs\Readme.txt"
          Vital="no" KeyPath="yes" Checksum="yes" Hidden="no" ReadOnly="no" >
        </File> 
      </Component>
    </DirectoryRef> <!-- </ComponentGroup> -->
  </Fragment>
   
  <Fragment>
    <DirectoryRef Id="LogsFolder">
      <!-- WORKS - REMOVES ALL FILES AND ALL SUBFOLDERS IN AND INCLUDING LogsFolder -->
      <!-- Remove files from C:\ProgramData\Analoc\Homework\Logs during the uninstall operation   -->  
      <Component Id='cmp_LogsFolder' Guid='{BD1A5BE9-F3DE-408E-8232-B3B8396B6DE0}' KeyPath='yes'>
        <RemoveFile Id='fil_PurgeCommonAppDataFolder' Name='*.*' On='uninstall' />
      </Component>  
      
      <!-- WORKS - REMOVES SPECIFIED FILES -->
      <!--
      <Component Id='LogsFolder' Guid='{AE898F0B-4FCF-4D78-BEE9-761D52561209}' KeyPath='yes'>
        <RemoveFile Id='DistinctWiFiDevicesAsIs_REC.txt' 
                    Name='DistinctWiFiDevicesAsIs_REC.txt' On='uninstall' />
        <RemoveFile Id='DistinctWiFiDevicesAsIs_SEQ.txt' 
                    Name='DistinctWiFiDevicesAsIs_SEQ.txt' On='uninstall' />
        <RemoveFile Id='DistinctWiFiDevicesGroupedBySensorID_MUL.txt' 
                    Name='DistinctWiFiDevicesGroupedBySensorID_MUL.txt' On='uninstall' />
        <RemoveFile Id='DistinctWiFiDevicesGroupedBySensorID_SEQ.txt' 
                    Name='DistinctWiFiDevicesGroupedBySensorID_SEQ.txt' On='uninstall' />      
      </Component>
      -->
      
      <!-- DOES NOT WORK -->
      <!-- Remove folder and all contained files and folders if the parent component  
      is selected for installation or removal. C:\ProgramData\Analoc\Homework\Logs --> 
      <!--
      <Component Id='LogsFolder' Guid='{21BFA958-C2D0-45E6-B2D4-175981F31DF7}' KeyPath='yes'>
        <RemoveFolder Id='LogsFolder' On='uninstall' />
      </Component> 
      --> 

    </DirectoryRef>
  </Fragment>
    
  <Fragment>
    <DirectoryRef Id="ShortcutsFolder">
      <Component Id="cmp_ShortcutsFolder" Guid="{4772C2AD-2C13-4CA8-9CEC-E12597974541}">
        <RemoveFolder Id="ShortcutsFolder" On="uninstall" />
        <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]" Type="string" Value="" KeyPath="yes" />
      </Component>
    </DirectoryRef>         
  </Fragment>
   
</Wix>